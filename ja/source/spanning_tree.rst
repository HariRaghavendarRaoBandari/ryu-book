.. _ch_spanning_tree:

スパニングツリーの実装
======================

本章では、Ryuを用いたスパニングツリーの実装方法を解説していきます。


スパニングツリー
----------------

スパニングツリーはループ構造を持つネットワークにおけるブロードキャストストーム
の発生を抑制する機能です。また、ループを防止するという本来の機能を応用して、
ネットワーク故障が発生した際に自動的に経路を切り替えるネットワークの
冗長性確保の手段としても用いられます。

スパニングツリーにはSTP、RSTP、PVST+、MSTPなど様々な種別がありますが、
本章では最も基本的なSTPの実装を見ていきます。



STP(spanning tree protocol)はネットワークを論理的なツリーとして扱い、
各ブリッジのポートをフレーム転送可能または不可能な状態に設定することで、
ループ構造を持つネットワークにおけるブロードキャストストームの発生を抑制します。

.. only:: latex

   +------------------------------------------+------------------------------------------+
   | #TODO: image1.eps                        |  #TODO: image2.eps                       |
   |                                          |                                          |
   |  ループを持つネットワーク                |   ループを回避したネットワーク           |
   +------------------------------------------+------------------------------------------+

.. only:: not latex

   +------------------------------------------+------------------------------------------+
   | #TODO: image1.png                        |  #TODO: image2.png                       |
   |                                          |                                          |
   |  ループを持つネットワーク                |   ループを回避したネットワーク           |
   +------------------------------------------+------------------------------------------+


STPではブリッジ間でBPDU(Bridge Protocol Data Unit)パケットを相互に交換
することにより、論理ツリーの頂点であるルートブリッジを決定し、さらに
各ブリッジのポートのフレーム転送可否を決定します。

具体的には、次のような手順により実現されます。

1. ルートブリッジの選出

    各ブリッジは自身の持つブリッジIDをBPDUパケットに設定してフラッディングします。
    ブリッジ間のBPDUパケットの交換により、最小のブリッジIDを持つブリッジが
    ルートブリッジとして選出され、以降はルートブリッジのみがオリジナルの
    BPDUパケットを送信し、他のブリッジはルートブリッジから受信したBPDUパケット
    を転送します。

    .. NOTE::

        ブリッジIDは次のように計算されます。

        　#TODO: ブリッジIDの計算方法


2. ポートの役割の決定

    各ポートのルートブリッジに至るまでのコストを元に、ポートの役割を決定します。

    * ルートポート(Root port)：
        ブリッジ内で最もルートブリッジまでのコストが小さいポート。
        ルートブリッジからのBPDUパケットを受信するポートになります。

    * 指定ポート(Designated port)：
        各リンクのルートブリッジまでのコストが小さい側のポート。
        ルートブリッジから受信したBPDUパケットを送信するポートになります。
        ルートブリッジのポートは全て指定ポートです。

    * 非指定ポート(Non designated port)：
        ルートポート・指定ポート以外のポート。
        フレーム転送を抑制するポートです。


    .. only:: latex

        +------------------------------------------+
        | #TODO: image3.eps                        |
        |                                          |
        |  各ポートの役割                          |
        +------------------------------------------+

    .. only:: not latex

        +------------------------------------------+
        | #TODO: image3.png                        |
        |                                          |
        |  各ポートの役割                          |
        +------------------------------------------+


    .. NOTE::

        ルートブリッジまでのコストは、BPDUパケットに設定された
        root path cost値などを元に算出されます。



3. ポートの状態遷移

    ブリッジの起動後、各ポートはLISTEN状態になります。その後、以下に示す
    状態遷移を行い、最終的に各ポートの役割に従ってFORWARD状態または
    BLOCK状態に遷移します。

    .. only:: latex

        +------------------------------------------+
        | #TODO: image4.eps                        |
        |                                          |
        |  ポート状態遷移                          |
        +------------------------------------------+

    .. only:: not latex

        +------------------------------------------+
        | #TODO: image4.png                        |
        |                                          |
        |  ポート状態遷移                          |
        +------------------------------------------+

    
    コンフィグで無効なポートと設定されたポートはDISABLE状態となり、
    以降、状態遷移は行われません。

    ======= ===========================================
    状態    動作
    ======= ===========================================
    DISABLE 無効ポート。全ての受信パケットを無視します。
    BLOCK   BPDU受信のみ を行います。
    LISTEN  BPDU送受信 を行います。
    LEARN   BPDU送受信/MAC学習 を行います。
    FORWARD BPDU送受信/MAC学習/フレーム転送 を行います。
    ======= ===========================================

    .. NOTE::

        Ryuに実装されているスパニングツリーのライブラリでは、簡略化のため
        LEARN状態でのMAC学習を行っていません。


これらの動作が各ブリッジで実行されることにより、フレーム転送を行うポートと
フレーム転送を抑制するポートが決定され、ネットワーク内のループが解消されます。

また、リンクダウンやBPDUパケットのmax age(デフォルト20秒)間の未受信
による故障検知、あるいはポートの追加等によりトポロジ変更を検出した場合は、
各ブリッジで上記の 1. 2. 3. を実行しツリーの再構築が行われます(STPの再計算)。



OpenFlowによるスパニングツリー
------------------------------

OpenFlow 1.3には次のようなポートの動作を設定するコンフィグが用意されているため、
各ポートの状態に応じてPort ModificationメッセージをOpenFlowスイッチに発行することで、
ポートのフレーム転送有無などの動作を制御することができます。


    ================== ===================================================
    値                 説明
    ================== ===================================================
    OFPPC_PORT_DOWN    保守者により無効設定された状態です
    OFPPC_NO_RECV      当該ポートで受信した全てのパケットを廃棄します
    OFPPC_NO_FWD       当該ポートからパケット転送を行いません
    OFPPC_NO_PACKET_IN table-missの場合にPacket-Inメッセージを送信しません
    ================== ===================================================


また、ポート状態ごとのBPDUパケット受信とBPDU以外のパケット受信を制御するため、
BPDUパケットをPacket-InさせるフローエントリとBPDU以外のパケットをdropさせる
フローエントリをそれぞれFlow ModメッセージによりOpenFlowスイッチに登録します。


コントローラは下記のようにPort Modificationメッセージによるポートコンフィグの設定と、
Flow Modメッセージによるフローエントリ設定を各OpenFlowスイッチに対して行うことで、
ポート状態に応じたBPDUパケットの送受信・BPDU以外のパケットの送受信の制御を行います。

    ======= ==========================================================================
    状態    設定
    ======= ==========================================================================
    DISABLE ポートコンフィグ(NO_RECV/ NO_FWD)、フローエントリ(設定無し)
    BLOCK   ポートコンフィグ(NO_FWD)、フローエントリ(BPDU Packet-In/ BPDU以外drop)
    LISTEN  ポートコンフィグ(0=設定無し)、フローエントリ(BPDU Packet-In/ BPDU以外drop)
    LEARN   ポートコンフィグ(0=設定無し)、フローエントリ(BPDU Packet-In/ BPDU以外drop)
    FORWARD ポートコンフィグ(0=設定無し)、フローエントリ(BPDU Packet-In)
    ======= ==========================================================================


これらの設定に加え、コントローラはOpenFlowスイッチから受信したSwitch Features
メッセージの情報からBPDUパケットを構築し、Packet-OutメッセージをOpenFlowスイッチに
発行することでOpenFlowスイッチ間のBPDUパケットの交換を実現します。


次に、実際にRyuを使って実装されたスパニングツリーのソースコードを見ていきます。


Ryuによるスパニングツリーの実装
-------------------------------

スパニングツリーのソースコードは、Ryuのソースツリーにあります。

    ryu/app/simple_switch_stp.py
    
    ryu/lib/stplib.py


アプリケーションの実装
^^^^^^^^^^^^^^^^^^^^^^

    #TODO: 以下の内容を書いていく。
    
    * _CONTEXTの実装
    * stplibのコンフィグ設定方法
    * EventTopologyChangeイベント受信時の処理
    * EventPortStateChangeイベント受信時の処理


ライブラリの実装
^^^^^^^^^^^^^^^^

    #TODO: 以下の内容を書いていく。
    
    * イベント待ち合わせによる状態遷移処理の実装
    * 
    * 


Ryuアプリケーションの実行
-------------------------

    #TODO: 以下の内容を書いていく。

    * 環境構築(スパニングツリー環境)

      * mnコマンドを使用する場合、カスタムトポロジが必要となる

    * 起動方法
    * 動作確認方法の説明



まとめ
------

本章では、スパニングツリーライブラリの利用を題材として、以下の項目に
ついて説明しました。

#TODO:

* 
* 
