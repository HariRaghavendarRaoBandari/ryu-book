.. _ch_link_aggregation:

リンク・アグリゲーションの実装
==============================

本章では、「 :ref:`ch_switching_hub` 」のスイッチングハブに簡単なリンク・
アグリゲーション機能を追加します。


リンク・アグリゲーション
------------------------

リンク・アグリゲーションは、IEEE802.1AX-2008で規定されている、複数の物理的な
回線を束ねてひとつの論理的なリンクとして扱う技術です。リンク・アグリゲーション
機能により、特定のネットワーク機器間の通信速度を向上させることができ、また同時
に、冗長性を確保することで耐障害性を向上させることができます。

 +---------------------------------------------+---------------------------------------------+
 | .. image:: images/link_aggregation/fig1.png | .. image:: images/link_aggregation/fig2.png |
 +---------------------------------------------+---------------------------------------------+

リンク・アグリゲーション機能を使用するには、それぞれのネットワーク機器において、
どのインターフェースをどのグループとして束ねるのかという設定を事前に行っておく
必要があります。

リンク・アグリゲーション機能を開始する方法には、それぞれのネットワーク機器に対
し直接指示を行うスタティックな方法と、LACP
(Link Aggregation Control Protocol)というプロトコルを使用することによって
動的に開始させるダイナミックな方法があります。

ダイナミックな方法を採用した場合、各ネットワーク機器は対向インターフェース同
士でLACPデータユニットを定期的に交換することにより、疎通不可能になっていない
ことをお互いに確認し続けます。この方法には、ネットワーク機器間にメディアコン
バータなどの中継装置が存在した場合にも、中継装置の向こう側のリンクダウンを検
知することができるというメリットがあります。本章では、LACPを用いたダイナミッ
クなリンク・アグリゲーション機能を実装していきます。


OpenFlowによるリンク・アグリゲーション
--------------------------------------

LACPを用いたリンク・アグリゲーションの仕組みは、簡単に言うと以下のようなもの
です。

  * 物理インターフェースのMACアドレスとは別に、束ねられた論理インターフェース
    のMACアドレスを用意する(物理インターフェースのMACアドレスのうちのどれかひ
    とつである場合もある)。
  * LACPデータユニットには論理インターフェースを表すMACアドレスが記載されてお
    り、LACPデータユニット以外のフレーム転送には、この論理インターフェースの
    MACアドレスを使用する。
  * LACPデータユニットの交換には個々の物理インターフェースのMACアドレスを使用
    する。
  * LACPデータユニットの交換に成功した場合、リンク・アグリゲーションを開始す
    る。リンク・アグリゲーション実行中、論理インターフェース間を通過するパケッ
    トは、特定の振り分けロジックに従い、いずれかの物理インターフェースから送
    信される。
  * リンク・アグリゲーション開始後も、LACPデータユニットを定期的に交換する。
    一定時間交換が途絶えたら、そのリンクには問題が発生したものとみなし、パケッ
    ト転送での使用を中止する。交換が再開されたら、そのリンクは復旧したものと
    みなし、パケット転送での使用を再開する。

これをOpenFlowで実現しようとした場合、(以下書きかけ)

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * OpenFlowでどのようにリンク・アグリゲーションを実現するか
    * 提供するライブラリの説明(簡易実装であることにも触れる)

      * 論理インターフェースのMACアドレスとしてスイッチのLOCALポートのMACア
        ドレスを使用しているため、ひとつのスイッチで複数のリンク・アグリゲー
        ション・グループを構成すると、複数の論理インターフェースが同じMACア
        ドレスを保有することになってしまう。OVSがその実装なので別によいか？
      * 「同一VLANでなければグループ化不可能」のチェックをしていない。

.. NOTE::

    多くのLACP対応機器は、自発的にLACPデータユニットを送信するACTIVEモードと
    受信したLACPデータユニットに応答を返すのみのPASSIVEモードが選択できますが、
    本ライブラリはPASSIVEモードのみ提供しています。LACPデータユニット交換は
    ACTIVE-ACTIVEもしくはACTIVE-PASSIVEの組み合わせで行われるため、本ライブ
    ラリ同士でのLACPデータユニット交換はできません。


Ryuによるリンク・アグリゲーションの実装
---------------------------------------

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * Ryuを用いたAPLのソース説明
    * CONTEXTを用いたLIB適用方法の説明
    * ライブラリの初期設定
    * ユーザ定義イベントの投げ方


リンク・アグリゲーション機能を備えたスイッチングハブのソースコードは、Ryuの
ソースツリーにあります。

    ryu/app/simple_switch_lacp.py

ただし、上記のソースはOpenFlow 1.0用であるため、新たにOpenFlow 1.3に対応した
実装を作成することにします。

.. raw:: latex

    \lstinputlisting{simple_switch_lacp_13.py}

これより、「 :ref:`ch_switching_hub` 」のスイッチングハブとの差異を順に説明
していきます。


「_CONTEXTS」の設定
^^^^^^^^^^^^^^^^^^^

ryu.base.app_manager.RyuAppを継承したRyuアプリケーションは、「_CONTEXTS」
ディクショナリに他のRyuアプリケーションを設定することにより、他のアプリケー
ションを別スレッドで起動させることができます。ここではryu.lib.lacplib
モジュールのLacpLibクラスを「lacplib」という名前で「_CONTEXTS」に設定してい
ます。

.. raw:: latex

    \begin{sourcecode}
    from ryu.lib import lacplib

    # ...

    class SimpleSwitchLacp13(app_manager.RyuApp):
        OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
        _CONTEXTS = {'lacplib': lacplib.LacpLib}

        # ...
    \end{sourcecode}


「_CONTEXTS」に設定したアプリケーションは、__init__()メソッドのkwargsから
インスタンスを取得することができます。


.. raw:: latex

    \begin{sourcecode}
        # ...
        def __init__(self, *args, **kwargs):
            super(SimpleSwitchLacp13, self).__init__(*args, **kwargs)
            self.mac_to_port = {}
            self._lacp = kwargs['lacplib']
        # ...
    \end{sourcecode}


ライブラリの初期設定
^^^^^^^^^^^^^^^^^^^^

「_CONTEXTS」に設定したLACPライブラリの初期設定を行います。ここでは以下の値
を設定します。

============ ================================= ==============================
パラメータ   値                                説明
============ ================================= ==============================
dpid         str_to_dpid('0000000000000001')   データパスID
ports        [1, 2]                            グループ化するポートのリスト
============ ================================= ==============================

この設定により、データパスID「0000000000000001」のOpenFlowSwitchのポート1と
ポート2がひとつのリンク・アグリゲーション・グループとして動作します。


.. raw:: latex

    \begin{sourcecode}
        # ...
            self._lacp = kwargs['lacplib']
            self._lacp.add(
                dpid=str_to_dpid('0000000000000001'), ports=[1, 2])
        # ...
    \end{sourcecode}



Ryuアプリケーションの実行
-------------------------

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * 環境構築(リンク・アグリゲーション環境)

      * mnコマンドを使用する場合、カスタムトポロジが必要となる

    * 起動方法
    * 動作確認方法の説明


まとめ
------

本章では、リンク・アグリゲーションライブラリの利用を題材として、以下の項目に
ついて説明しました。

* 「_CONTEXTS」を用いたライブラリの使用方法
* ユーザ定義イベントの定義方法とイベントトリガーの発生方法
