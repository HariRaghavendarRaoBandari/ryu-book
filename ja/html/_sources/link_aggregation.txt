.. _ch_link_aggregation:

リンク・アグリゲーションの実装
==============================

本章では、「 :ref:`ch_switching_hub` 」のスイッチングハブに簡単なリンク・
アグリゲーション機能を追加します。


リンク・アグリゲーション
------------------------

リンク・アグリゲーションは、IEEE802.1AX-2008で規定されている、複数の物理的な
回線を束ねてひとつの論理的なリンクとして扱う技術です。リンク・アグリゲーション
機能により、特定のネットワーク機器間の通信速度を向上させることができ、また同時
に、冗長性を確保することで耐障害性を向上させることができます。

.. only:: latex

   +---------------------------------------------+---------------------------------------------+
   | .. image:: images/link_aggregation/fig1.eps | .. image:: images/link_aggregation/fig2.eps |
   +---------------------------------------------+---------------------------------------------+

.. only:: not latex

   +---------------------------------------------+---------------------------------------------+
   | .. image:: images/link_aggregation/fig1.png | .. image:: images/link_aggregation/fig2.png |
   |    :scale: 40%                              |    :scale: 40%                              |
   +---------------------------------------------+---------------------------------------------+

リンク・アグリゲーション機能を使用するには、それぞれのネットワーク機器において、
どのインターフェースをどのグループとして束ねるのかという設定を事前に行っておく
必要があります。

リンク・アグリゲーション機能を開始する方法には、それぞれのネットワーク機器に
対し直接指示を行うスタティックな方法と、LACP
(Link Aggregation Control Protocol)というプロトコルを使用することによって
動的に開始させるダイナミックな方法があります。

ダイナミックな方法を採用した場合、各ネットワーク機器は対向インターフェース同
士でLACPデータユニットを定期的に交換することにより、疎通不可能になっていない
ことをお互いに確認し続けます。この方法には、ネットワーク機器間にメディアコン
バータなどの中継装置が存在した場合にも、中継装置の向こう側のリンクダウンを検
知することができるというメリットがあります。本章では、LACPを用いたダイナミッ
クなリンク・アグリゲーション機能を実装していきます。


OpenFlowによるリンク・アグリゲーション
--------------------------------------

LACPを用いたリンク・アグリゲーションの仕組みは、簡単に言うと以下のようなもの
です。

* 物理インターフェースのMACアドレスとは別に、束ねられた論理インターフェース
  のMACアドレスを用意する(物理インターフェースのMACアドレスのうちのどれかひ
  とつである場合もある)。
* LACPデータユニットには論理インターフェースを表すMACアドレスが記載されてお
  り、LACPデータユニット以外のフレーム転送には、この論理インターフェースの
  MACアドレスを使用する。
* LACPデータユニットの交換には個々の物理インターフェースのMACアドレスを使用
  する。
* LACPデータユニットを交換する物理インターフェースは、その役割によってACTIVE
  とPASSIVEに分類される。ACTIVEは一定時間ごとにLACPデータユニットを送信し、
  疎通を能動的に確認する。PASSIVEはACTIVEから送信されたLACPデータユニットを
  受信した際に応答を返すことにより、疎通を受動的に確認する。
* LACPデータユニットの交換に成功した場合、リンク・アグリゲーションを開始す
  る。リンク・アグリゲーション実行中、論理インターフェース間を通過するパケッ
  トは、特定の振り分けロジックに従い、いずれかの物理インターフェースから送
  信される(振り分けロジックに関しては仕様で定められていない)。
* リンク・アグリゲーション開始後も、LACPデータユニットを定期的に交換する。
  一定時間交換が途絶えたら、そのリンクには問題が発生したものとみなし、パケッ
  ト転送での使用を中止する。交換が再開されたら、そのリンクは復旧したものと
  みなし、パケット転送での使用を再開する。

OpenFlowスイッチとOpenFlowコントローラで、リンク・アグリゲーション機能を以下
のように実現することにします。実装を簡素化するためにいくつか制限を設けてあり
ます。

* LACPデータユニットを交換するインターフェースはPASSIVEのみ実装するものとし
  ます。これにより、定期送信のためのタイマー処理が不要となります。
* OpenFlowスイッチは、LACPデータユニットを受信した際、応答用のLACPデータユ
  ニットを送信します。この動作はOpenFlowスイッチ単体では実現できないので、
  OpenFlowスイッチにはLACPデータユニット受信時にPacket-Inを送信するフローエ
  ントリを登録し、応答用のLACPデータユニットの作成はOpenFlowコントローラで行
  い、Packet-Outで送信します。
* LACPデータユニットをPacket-Inさせるフローエントリにはidle_timeoutを設定
  し、一定時間LACPデータユニットを受信しなかった場合にFlowRemovedメッセージ
  がOpenFlowコントローラに飛ぶようにします。
* OpenFlowコントローラは、FlowRemovedメッセージを受信した際、どの物理イン
  ターフェースでLACPデータユニットの交換が停止したかを識別し、その物理イン
  ターフェースが所属している論理インターフェースに関連するすべてのフローエン
  トリを削除します。また、LACPデータユニットの交換が再開された際にも、当該論
  理インターフェースに関連するすべてのフローエントリを削除します。これは、選
  択可能な物理インターフェースの個数が増減したことに伴う再振り分けを想定した
  処理です。
* 振り分けロジックは実装しません。対向インターフェースが振り分けた経路をその
  まま使用するものとします。
* LACP以外のパケットは通常のスイッチングハブ機能で処理します。

上記機能の大部分を実装したLACPライブラリが、Ryuのソースツリーにあります。

    ryu/lib/lacplib.py

以降の節で、上記機能が具体的にどのように実装されているかを見ていきます。なお、
引用されているソースは抜粋です。全体像については実際のソースをご参照ください。


論理インターフェースの作成
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * addの説明


LACPデータユニットの受信処理
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * ユーザ定義イベントの送信方法
    * LACPデータユニットの作成・送信


LACPデータユニットをPacket-Inさせるフローエントリの登録
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * 「when the timeout time has changed, ～」あたりの説明
    * OpenFlowのバージョンによるFlowModの違い


FlowRemovedメッセージの受信処理
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * flow_removed_handlerの説明


有効な物理インターフェースの個数の増減に伴う処理
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * 「when LACP arrived at disabled port, ～」あたりの説明


Ryuによるリンク・アグリゲーションの実装
---------------------------------------

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * Ryuを用いたAPLのソース説明
    * CONTEXTを用いたLIB適用方法の説明
    * ライブラリの初期設定
    * ユーザ定義イベントの受信方法


前章で説明したLACPライブラリを使用してリンク・アグリゲーション機能を実装した
スイッチングハブのソースコードが、Ryuのソースツリーにあります。

    ryu/app/simple_switch_lacp.py

ただし、上記のソースはOpenFlow 1.0用であるため、新たにOpenFlow 1.3に対応した
実装を作成することにします。

.. rst-class:: sourcecode

.. literalinclude:: sources/simple_switch_lacp_13.py

これより、「 :ref:`ch_switching_hub` 」のスイッチングハブとの差異を順に説明
していきます。


「_CONTEXTS」の設定
^^^^^^^^^^^^^^^^^^^

ryu.base.app_manager.RyuAppを継承したRyuアプリケーションは、「_CONTEXTS」
ディクショナリに他のRyuアプリケーションを設定することにより、他のアプリケー
ションを別スレッドで起動させることができます。ここではryu.lib.lacplib
モジュールのLacpLibクラスを「lacplib」という名前で「_CONTEXTS」に設定してい
ます。

.. rst-class:: sourcecode

::

    from ryu.lib import lacplib

    # ...

    class SimpleSwitchLacp13(app_manager.RyuApp):
        OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
        _CONTEXTS = {'lacplib': lacplib.LacpLib}

        # ...


「_CONTEXTS」に設定したアプリケーションは、__init__()メソッドのkwargsから
インスタンスを取得することができます。


.. rst-class:: sourcecode

::

        # ...
        def __init__(self, *args, **kwargs):
            super(SimpleSwitchLacp13, self).__init__(*args, **kwargs)
            self.mac_to_port = {}
            self._lacp = kwargs['lacplib']
        # ...


ライブラリの初期設定
^^^^^^^^^^^^^^^^^^^^

「_CONTEXTS」に設定したLACPライブラリの初期設定を行います。ここでは以下の値
を設定します。

============ ================================= ==============================
パラメータ   値                                説明
============ ================================= ==============================
dpid         str_to_dpid('0000000000000001')   データパスID
ports        [1, 2]                            グループ化するポートのリスト
============ ================================= ==============================

この設定により、データパスID「0000000000000001」のOpenFlowSwitchのポート1と
ポート2がひとつのリンク・アグリゲーション・グループとして動作します。


.. rst-class:: sourcecode

::

        # ...
            self._lacp = kwargs['lacplib']
            self._lacp.add(
                dpid=str_to_dpid('0000000000000001'), ports=[1, 2])
        # ...



Ryuアプリケーションの実行
-------------------------

.. CAUTION::

    TODO: 以下の内容を書いていく。

    * 環境構築(リンク・アグリゲーション環境)

      * mnコマンドを使用する場合、カスタムトポロジが必要となる

    * 起動方法
    * 動作確認方法の説明


まとめ
------

本章では、リンク・アグリゲーションライブラリの利用を題材として、以下の項目に
ついて説明しました。

* 「_CONTEXTS」を用いたライブラリの使用方法
* ユーザ定義イベントの定義方法とイベントトリガーの発生方法
